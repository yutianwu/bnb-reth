# Runs integration tests.

name: integration

on:
  pull_request:
    branches: [ main, develop ]
  merge_group:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  SEED: rustethereumethereumrust
  TOOL_CHAIN: "1.80"

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  test:
    name: test / ${{ matrix.network }}
    runs-on: [ bnb-chain-ap-qa-cicd-runners ]
    env:
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        include:
          - network: ethereum
            extra-features: ""
          - network: optimism
            extra-features: "opbnb"
          - network: bsc
            extra-features: ""
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.TOOL_CHAIN }}
      - name: Install Geth
        run: .github/assets/install_geth.sh
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true
      - if: matrix.network == 'ethereum'
        name: Run tests
        run: |
          cargo nextest run \
            --locked --features "asm-keccak ${{ matrix.network }} ${{ matrix.extra-features }}" \
            --workspace --exclude ef-tests \
            -E "kind(test)"
      - if: matrix.network == 'optimism'
        name: Run tests
        run: |
          cargo nextest run \
            --locked -p reth-node-optimism --features "optimism ${{ matrix.extra-features }}"
      - if: matrix.network == 'bsc'
        name: Run tests
        run: |
          cargo nextest run \
            --locked -p reth-node-bsc --features "bsc ${{ matrix.extra-features }}" \
            -E "kind(test)"

  integration-success:
    name: integration success
    runs-on: ubuntu-latest
    if: always()
    needs: [ test ]
    timeout-minutes: 30
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}
